## Creando swarm
#- name: obtiendo nombre de maquinas
#  debug: var=hostvars
- name: Instalando docker
  yum:
    name: python2-pip
    state: latest
  become: true

- name: instalando python-consul
  pip: 
    name: python-consul
  become: true

- name: creando swarm
  shell: docker swarm init --advertise-addr {{ ansible_eth1['ipv4']['address'] }}
  become: true
  when: "docker_info.stdout.find('Swarm: inactive') != -1 and ansible_hostname == 'manager'"

- name: obteniendo token swarm
  shell: docker swarm join-token -q worker
  register: worker_token
  become: true
 # when: ansible_hostname == "manager"
  delegate_to: 192.168.10.100

- debug: var=worker_token
  when: ansible_hostname == "manager"

- name: escribiendo token swarm
  consul_kv:
    key: manager/token_swarm
    value: '{{worker_token.stdout}}' 
  become: true
  #when: ansible_hostname == "manager"
  delegate_to: 192.168.10.100

- name: obteniendo token
  consul_kv: 
    key: manager/token_swarm
  register: token_swarm
  when: ansible_hostname != "manager"

- debug: var=token_swarm['data']['Value']
  when: ansible_hostname != "manager"

- name: uniendo al swarm
  shell: "docker swarm join --token  {{ token_swarm['data']['Value']}} 192.168.10.100:2377 --advertise-addr {{ ansible_eth1['ipv4']['address'] }}"
  become: true
  when: ansible_hostname != "manager"

- name: instalando repo runner
  shell: "curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | sudo bash"
  become: true
  when: ansible_hostname == "manager"

- name: Instalando gitlab-runner
  yum:
    name: gitlab-runner
    state: latest
  become: true
  when: ansible_hostname == "manager"

- name: mostrando runner configurados
  command: gitlab-runner list
  register: configured_runners
  changed_when: False
  when: ansible_hostname == "manager"

- name: Registrando runner
  command: gitlab-runner register >
    --non-interactive
    --url '{{ gitlab_runner_coordinator_url }}'
    --registration-token '{{ gitlab_runner_registration_token }}'
    --description '{{ gitlab_runner_description }}'
    --tag-list '{{ gitlab_runner_tags }}'
    --executor '{{ gitlab_runner_executor }}'
  when: "configured_runners.stderr.find('\n{{ gitlab_runner_description }}') == -1 and ansible_hostname == 'manager'"

- name: Deployando portainer
  shell: "docker stack deploy --compose-file=/vagrant/portainer-stack.yml portainer_stack"
  become: true
  when: ansible_hostname == "manager"
